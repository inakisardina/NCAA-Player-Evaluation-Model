View(closers2024_twentyfiveplus_sv)
View(lastyearsfiltered_15t24)
View(overall_best_stretch)
View(players_with_3_or_more)
View(results)
View(results_adjusted)
View(season_count_per_decade)
View(season_counts)
View(top_closer_per_decade)
View(total_saves_per_decade)
View(young_elite_closers_unfiltered)
View(young_elite_closers_ungrouped_unfiltered)
View(thirtyplus_count_perseason)
View(thirtyplus_count_per_decade)
View(thirtyplus_closers_perdecade)
View(summary_data)
View(summary_closers3_thirtyplus_sv)
View(thirtyplus_closers_perdecade)
View(thirtyplus_count_per_decade)
View(thirtyplus_count_perseason)
View(get_first_four_years)
View(get_first_three_years)
View(season_counts)
View(season_count_per_decade)
View(seasoncount_projected_thrirtyplus_2020s)
View(thirtyplus_count_perseason)
head(thirtyplus_count_perseason)
get_first_three_years <- function(decade_start) {
return((decade_start):(decade_start + 2))
}
View(get_first_three_years)
result <- data.frame(Decade = integer(), Total_Players = integer(), stringsAsFactors = FALSE)
result <- data.frame(Decade = integer(), Total_Players = integer(), stringsAsFactors = FALSE)
# Loop through each decade
for (decade_start in decades) {
# Get the first three years of the decade
first_three_years <- get_first_three_years(decade_start)
# Filter the dataset for these years and calculate the total
total_players <- sum(thirtyplus_count_perseason$players_with_30_SV[
thirtyplus_count_perseason$Season %in% first_three_years
], na.rm = TRUE)
result <- rbind(result, data.frame(Decade = decade_start, Total_Players = total_players))
}
View(result)
View(closers_2020s)
View(closers)
View(young_elite_closers_ungrouped_unfiltered)
View(young_elite_closers_unfiltered)
View(young_elite_closers_ungrouped_unfiltered)
View(top_closer_per_decade)
View(closers)
View(thirtyplus_closers_perdecade)
View(thirtyplus_count_per_decade)
View(thirtyplus_count_perseason)
rm(average_saves_per_decade)
rm(best_2000s)
rm(best_three_year_stretch)
rm(list = ())
rm(list = ls())
# Best Performers script
library(tidyverse)
library(baseballr)
library(lubridate)
# ---- Define Date Range ----
start_date <- "2025-07-28"
end_date <- "2025-07-28"
# ---- Pull Statcast Data ----
statcast_data <- statcast_search(start_date = start_date, end_date = end_date)
# ---- Clean Events Column ----
statcast_data <- statcast_data %>%
mutate(events = tolower(events))
# ---- Fantasy Points for Hitters ----
hitter_points <- statcast_data %>%
filter(!is.na(events)) %>%
mutate(points = case_when(
events == "single"         ~ 1,
events == "double"         ~ 2,
events == "triple"         ~ 3,
events == "home_run"       ~ 6,
events == "walk"           ~ 1,
events == "hit_by_pitch"   ~ 1,
TRUE                       ~ 0
)) %>%
group_by(player_name, batter) %>%
summarise(
total_points = sum(points),
HR = sum(events == "home_run"),
"2B" = sum(events == "double"),
"3B" = sum(events == "triple"),
Hits = sum(events %in% c("single", "double", "triple", "home_run")),
.groups = "drop"
) %>%
arrange(desc(total_points))
# ---- Fantasy Points for Pitchers ----
pitcher_statcast_data <- statcast_search(
start_date = start_date,
end_date = end_date,
player_type = "pitcher"
)
# ---- Clean + Fantasy Points Calculation ----
pitcher_points <- pitcher_statcast_data %>%
mutate(is_out = events %in% c(
"field_out", "strikeout", "double_play", "triple_play",
"sac_fly", "sac_bunt"
)) %>%
group_by(player_name, game_date) %>%
summarise(
outs = sum(is_out, na.rm = TRUE),
IP = round(outs / 3, 2),
K = sum(events == "strikeout", na.rm = TRUE),
R = sum(post_bat_score > bat_score, na.rm = TRUE),
H = sum(events %in% c("single", "double", "triple", "home_run"), na.rm = TRUE),
BB = sum(events == "walk", na.rm = TRUE),
Points = (IP * 3) + (K * 1) - (R * 1) - (H * 1) - (BB * 1),
.groups = "drop"
) %>%
group_by(player_name) %>%
summarise(total_points = sum(Points), .groups = "drop") %>%
arrange(desc(total_points))
# ---- Output Top 10 ----
cat("\nTop 10 Hitters:\n")
print(hitter_points %>% slice_max(total_points, n = 10))
cat("\nTop 10 Pitchers:\n")
print(pitcher_points %>% slice_max(total_points, n = 10))
source("~/Desktop/Rstatcast/R_scripts_statcast/best_performers_rstatcast.R")
source("~/Desktop/Rstatcast/R_scripts_statcast/pitcher_report_plots_rstatcast.R")
source("~/Desktop/Rstatcast/R_scripts_statcast/pitcher_report_plots_rstatcast.R")
source("~/Desktop/Rstatcast/R_scripts_statcast/pitcher_report_plots_rstatcast.R")
source("~/Desktop/Rstatcast/R_scripts_statcast/pitcher_report_plots_rstatcast.R")
pitch_color_table <- tibble::tibble(
`Pitch Type` = names(pitch_colors),
`Hex Color` = unname(pitch_colors)
) %>%
filter(`Pitch Type` %in% unique(pitcher_data$pitch_name)) %>%
mutate(
Color = cell_spec(`Pitch Type`, background = `Hex Color`, color = "#f5efe6", bold = TRUE)
) %>%
select(Color) %>%
t() %>%  # transpose the table
as.data.frame()
# Rename the single row to something meaningful (optional)
rownames(pitch_color_table) <- "Pitch Types"
# Save table
save_kable(
kbl(pitch_color_table, escape = FALSE, caption = "Pitch Types") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover")),
file = file.path(output_folder,  paste0(pitcher_file_name, "pitch_color_table.html"))
)
html_path <- normalizePath(file.path(output_folder, paste0(pitcher_file_name, "pitch_color_table.html")))
png_path <- normalizePath(file.path(output_folder, paste0(pitcher_file_name, "pitch_color_table.png")), mustWork = FALSE)
webshot(html_path, png_path, selector = "table", zoom = 2)
source("~/Desktop/Rstatcast/R_scripts_statcast/best_performers_rstatcast.R")
source("~/Desktop/Rstatcast/R_scripts_statcast/pitcher_report_plots_rstatcast.R")
getwd()
# ---- 1. Clear Environment ----
rm(list = ls())
graphics.off()
# ---- 2. Reload Libraries ----
library(ggplot2)
# ---- 3. Create Output Folder ----
output_folder <- "/Users/kaks/Desktop/Rstatcast/R_scripts_statcast/final_debug_plots"
dir.create(output_folder, showWarnings = FALSE, recursive = TRUE)
# ---- 4. Build and Save 4 Sample Plots ----
plot_names <- c("p1", "p2", "p3", "p4")
heights <- c(6, 4, 4, 5)
for (i in seq_along(plot_names)) {
p <- ggplot(mtcars, aes(mpg, hp)) +
geom_point() +
labs(title = paste("Plot", plot_names[i]))
file_name <- paste0("Darvish_Yu_", plot_names[i], ".png")
file_path <- file.path(output_folder, file_name)
ggsave(filename = file_path, plot = p, width = 6, height = heights[i], dpi = 300)
cat("Saved:", file_path, "| Exists?:", file.exists(file_path), "\n")
}
library(ggplot2)
output_folder <- "/Users/kaks/Desktop/Rstatcast/R_scripts_statcast/final_debug_plots"
dir.create(output_folder, showWarnings = FALSE, recursive = TRUE)
p <- ggplot(mtcars, aes(mpg, hp)) + geom_point() + labs(title = "Final Save Test")
file_path <- file.path(output_folder, "final_test_plot.png")
ggsave(filename = file_path, plot = p, width = 6, height = 6, dpi = 300)
cat("Saved to:", file_path, "| Exists?:", file.exists(file_path), "\n")
# ---- Load Packages ----
library(baseballr)
library(dplyr)
library(ggplot2)
library(ggforce)
library(kableExtra)
library(webshot2)
library(stringi)
# ---- Parameters ----
start_date <- "2025-07-30"
end_date <- "2025-07-30"
target_player <- "Darvish, Yu"
plot_subtitle <- paste(start_date)
output_folder <- "/Users/kaks/Documents/plots"
dir.create(output_folder, showWarnings = FALSE, recursive = TRUE)
pitcher_file_name <- target_player %>%
stri_trans_general("Latin-ASCII") %>%
gsub(", ", "_", .) %>%
gsub("[^A-Za-z0-9_\\-]", "_", .)
# ---- Get Statcast Data ----
statcast_data <- statcast_search(
start_date = start_date,
end_date = end_date,
player_type = "pitcher"
)
# ---- Filter for Selected Pitcher ----
pitcher_data <- statcast_data %>%
filter(player_name == target_player) %>%
mutate(
pfx_x_pitcher = -pfx_x * 12,
pfx_z_pitcher = pfx_z * 12
)
# ---- Summarize Movement ----
pitch_movement <- pitcher_data %>%
group_by(pitch_name) %>%
summarise(
avg_pfx_x = mean(pfx_x_pitcher, na.rm = TRUE),
avg_pfx_z = mean(pfx_z_pitcher, na.rm = TRUE),
velo = round(mean(release_speed, na.rm = TRUE), 1),
count = n(),
.groups = "drop"
) %>%
mutate(
usage = round(count / sum(count) * 100, 1),
label = paste0(pitch_name, "\n", velo, " mph")
)
# ---- Define Pitch Colors ----
pitch_colors <- c(
"Sweeper" = "#CAB2D6",
"Split-Finger" = "#1F78B4",
"4-Seam Fastball" = "#E31A1C",
"Cutter" = "#52013f",
"Slider" = "#1a4513",
"Sinker" = "#7d3701",
"Curveball" = "#01317d",
"Changeup" = "#c4c106",
"Slurve" = "#9874b5",
"Slow Curve" = "#63abab",
"Knuckleball" = "#f3ff8a",
"Knuckle Curve" = "#fa5fc1"
)
# ---- Plot: Pitch Movement ----
p1 <- ggplot(pitch_movement, aes(x = avg_pfx_x, y = avg_pfx_z, color = pitch_name)) +
geom_circle(aes(x0 = 0, y0 = 0, r = 6), data = data.frame(), inherit.aes = FALSE, color = "#7b989c", linetype = "dashed") +
geom_circle(aes(x0 = 0, y0 = 0, r = 12), data = data.frame(), inherit.aes = FALSE, color = "#92adb0") +
geom_circle(aes(x0 = 0, y0 = 0, r = 18), data = data.frame(), inherit.aes = FALSE, color = "#7b989c", linetype = "dashed") +
geom_circle(aes(x0 = 0, y0 = 0, r = 24), data = data.frame(), inherit.aes = FALSE, color = "#92adb0") +
geom_vline(xintercept = 0, color = "gray40") +
geom_hline(yintercept = 0, color = "gray40") +
geom_point(aes(size = usage), alpha = 0.9, show.legend = FALSE) +
scale_color_manual(values = pitch_colors) +
coord_fixed(xlim = c(-30, 30), ylim = c(-30, 30)) +
labs(title = "Pitch Movement", subtitle = plot_subtitle, x = "Horizontal Break (in)", y = "Vertical Break (in)", color = NULL) +
theme_minimal(base_size = 12) +
theme(
panel.background = element_rect(fill = "#f5efe6", color = NA),
plot.background = element_rect(fill = "#f5efe6", color = NA),
panel.grid = element_blank(),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic", color = "gray40"),
legend.position = "none"
)
ggsave(
filename = file.path(output_folder, paste0(pitcher_file_name, "_pitch_movement.png")),
plot = p1,
width = 6,
height = 6,
dpi = 300
)
# ---- Donut Plot: Usage by Batter Side ----
donut_data <- pitcher_data %>%
filter(stand %in% c("R", "L")) %>%
group_by(stand, pitch_name) %>%
summarise(count = n(), .groups = "drop") %>%
group_by(stand) %>%
mutate(usage = count / sum(count) * 100) %>%
ungroup() %>%
rename(batter_side = stand)
p2 <- ggplot(donut_data, aes(x = 2, y = usage, fill = pitch_name)) +
geom_col(width = 1, color = "white") +
coord_polar(theta = "y") +
facet_wrap(~batter_side) +
xlim(1, 2.5) +
scale_fill_manual(values = pitch_colors) +
labs(title = "Pitch Usage by Batter Side") +
theme_void(base_size = 12) +
theme(
panel.background = element_rect(fill = "#f5efe6", color = NA),
plot.background = element_rect(fill = "#f5efe6", color = NA),
strip.text = element_text(size = 14, face = "bold"),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
legend.position = "none"
)
ggsave(
filename = file.path(output_folder, paste0(pitcher_file_name, "_donut_usage.png")),
plot = p2,
width = 6,
height = 4,
dpi = 300
)
# ---- Velocity Boxplot ----
avg_velo_labels <- pitcher_data %>%
group_by(pitch_name) %>%
summarise(
pitch_name = unique(pitch_name),
avg_velo = round(mean(release_speed, na.rm = TRUE), 1),
.groups = "drop"
)
p3 <- ggplot(pitcher_data, aes(x = pitch_name, y = release_speed, fill = pitch_name)) +
geom_boxplot(width = 0.15, outlier.shape = NA, color = "black") +
geom_text(
data = avg_velo_labels,
aes(x = pitch_name, y = avg_velo + 2, label = paste0("Avg: ", avg_velo)),
inherit.aes = FALSE,
size = 3.5,
fontface = "bold"
) +
scale_fill_manual(values = pitch_colors) +
labs(title = "Velocity Distribution by Pitch Type", x = "Pitch Type", y = "Velocity (mph)") +
theme_minimal(base_size = 12) +
theme(
panel.background = element_rect(fill = "#f5efe6", color = NA),
plot.background = element_rect(fill = "#f5efe6", color = NA),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
)
ggsave(
filename = file.path(output_folder, paste0(pitcher_file_name, "_velo_distribution.png")),
plot = p3,
width = 6,
height = 4,
dpi = 300
)
# ---- Strike Zone Command Plot ----
strike_zone <- data.frame(x = c(-0.95, 0.95, 0.95, -0.95, -0.95), y = c(1.5, 1.5, 3.5, 3.5, 1.5))
p4 <- ggplot(pitcher_data, aes(x = plate_x, y = plate_z, color = pitch_name)) +
geom_point(alpha = 0.6, size = 2) +
geom_path(data = strike_zone, aes(x = x, y = y), inherit.aes = FALSE, color = "black") +
scale_color_manual(values = pitch_colors) +
coord_fixed(xlim = c(-2, 2), ylim = c(1, 4)) +
labs(title = "Pitch Location in the Strike Zone", x = "Horizontal Location (ft)", y = "Vertical Location (ft)") +
theme_minimal(base_size = 12) +
theme(
panel.background = element_rect(fill = "#f5efe6", color = NA),
plot.background = element_rect(fill = "#f5efe6", color = NA),
legend.position = "none"
)
ggsave(
filename = file.path(output_folder, paste0(pitcher_file_name, "_strike_zone.png")),
plot = p4,
width = 6,
height = 5,
dpi = 300
)
# ---- Pitching Line Table ----
total_outs <- sum(ifelse(pitcher_data$events %in% c("field_out", "strikeout", "force_out", "sac_fly", "sac_bunt", "fielders_choice_out"), 1,
ifelse(pitcher_data$events %in% c("double_play", "grounded_into_double_play"), 2, 0)), na.rm = TRUE)
innings_pitched <- floor(total_outs / 3) + (total_outs %% 3) / 10
pitching_line <- pitcher_data %>%
summarise(
IP = innings_pitched,
BF = n_distinct(at_bat_number),
Pitches = n(),
Strikes = sum(type %in% c("S", "X"), na.rm = TRUE),
Balls = sum(type == "B", na.rm = TRUE),
`Strike %` = round(Strikes / Pitches * 100, 1),
H = sum(events %in% c("single", "double", "triple", "home_run"), na.rm = TRUE),
HR = sum(events == "home_run", na.rm = TRUE),
BB = sum(events == "walk", na.rm = TRUE),
K = sum(events == "strikeout", na.rm = TRUE),
R = sum(post_bat_score > bat_score, na.rm = TRUE)
)
save_kable(
kbl(pitching_line, caption = "Pitching Line") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover")),
file = file.path(output_folder, paste0(pitcher_file_name, "pitching_line.html"))
)
html_path <- normalizePath(file.path(output_folder, paste0(pitcher_file_name, "pitching_line.html")))
png_path <- normalizePath(file.path(output_folder, paste0(pitcher_file_name, "pitching_line.png")), mustWork = FALSE)
webshot(html_path, png_path, selector = "table", zoom = 2)
# ---- Color Table ----
pitch_color_table <- tibble::tibble(
`Pitch Type` = names(pitch_colors),
`Hex Color` = unname(pitch_colors)
) %>%
filter(`Pitch Type` %in% unique(pitcher_data$pitch_name)) %>%
mutate(
Color = cell_spec(`Pitch Type`, background = `Hex Color`, color = "#f5efe6", bold = TRUE)
) %>%
select(Color) %>%
t() %>%  # transpose the table
as.data.frame()
# Rename the single row to something meaningful (optional)
rownames(pitch_color_table) <- "Pitch Types"
# Save table
save_kable(
kbl(pitch_color_table, escape = FALSE, caption = "Pitch Types") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover")),
file = file.path(output_folder,  paste0(pitcher_file_name, "pitch_color_table.html"))
)
html_path <- normalizePath(file.path(output_folder, paste0(pitcher_file_name, "pitch_color_table.html")))
png_path <- normalizePath(file.path(output_folder, paste0(pitcher_file_name, "pitch_color_table.png")), mustWork = FALSE)
webshot(html_path, png_path, selector = "table", zoom = 2)
system("open plots")
# Best Performers script
library(tidyverse)
library(baseballr)
library(lubridate)
# ---- Define Date Range ----
start_date <- "2025-07-30"
end_date <- "2025-07-30"
# ---- Pull Statcast Data ----
statcast_data <- statcast_search(start_date = start_date, end_date = end_date)
# ---- Clean Events Column ----
statcast_data <- statcast_data %>%
mutate(events = tolower(events))
# ---- Fantasy Points for Hitters ----
hitter_points <- statcast_data %>%
filter(!is.na(events)) %>%
mutate(points = case_when(
events == "single"         ~ 1,
events == "double"         ~ 2,
events == "triple"         ~ 3,
events == "home_run"       ~ 6,
events == "walk"           ~ 1,
events == "hit_by_pitch"   ~ 1,
TRUE                       ~ 0
)) %>%
group_by(player_name, batter) %>%
summarise(
total_points = sum(points),
HR = sum(events == "home_run"),
"2B" = sum(events == "double"),
"3B" = sum(events == "triple"),
Hits = sum(events %in% c("single", "double", "triple", "home_run")),
.groups = "drop"
) %>%
arrange(desc(total_points))
# ---- Fantasy Points for Pitchers ----
pitcher_statcast_data <- statcast_search(
start_date = start_date,
end_date = end_date,
player_type = "pitcher"
)
# ---- Clean + Fantasy Points Calculation ----
pitcher_points <- pitcher_statcast_data %>%
mutate(is_out = events %in% c(
"field_out", "strikeout", "double_play", "triple_play",
"sac_fly", "sac_bunt"
)) %>%
group_by(player_name, game_date) %>%
summarise(
outs = sum(is_out, na.rm = TRUE),
IP = round(outs / 3, 2),
K = sum(events == "strikeout", na.rm = TRUE),
R = sum(post_bat_score > bat_score, na.rm = TRUE),
H = sum(events %in% c("single", "double", "triple", "home_run"), na.rm = TRUE),
BB = sum(events == "walk", na.rm = TRUE),
Points = (IP * 3) + (K * 1) - (R * 1) - (H * 1) - (BB * 1),
.groups = "drop"
) %>%
group_by(player_name) %>%
summarise(total_points = sum(Points), .groups = "drop") %>%
arrange(desc(total_points))
# ---- Output Top 10 ----
cat("\nTop 10 Hitters:\n")
print(hitter_points %>% slice_max(total_points, n = 10))
cat("\nTop 10 Pitchers:\n")
print(pitcher_points %>% slice_max(total_points, n = 10))
source("~/Desktop/Rstatcast/R_scripts_statcast/pitcher_report_plots_rstatcast.R")
source("~/Desktop/Rstatcast/R_scripts_statcast/pitcher_report_plots_rstatcast.R")
source("~/Desktop/Rstatcast/R_scripts_statcast/pitcher_report_plots_rstatcast.R")
# Pitching Ultra Master Script
#Working Directory
setwd("/Users/kaks/Desktop/CanesBaseball/PitchingUltra")
# 1. Load and clean data
source("R/01_load_clean_data.R")
# cutter check
# 2. Calculate Pitching+
source("R/02_pitching_plus.R")
# 3. Estimate expected performance
source("R/03_xpitching_plus.R")
#chases
# 4. Classify pitcher types
source("R/04_counts.R")
# Important notes: Splits, tendencies,
# Working Directory
setwd("/Users/kaks/Desktop/CanesBaseball/PitchingUltra")
# 1. Load and clean data
source("R/01_load_clean_data.R")
# 2. Calculate eye+
source("R/20_swing_decisions.R")
# 3. Contact Quality
source("R/21_contact_quality.R")
# 3.5 PA adjustments
source("R/00_collapse_to_PA.R")
#4. Results
source("R/22_hitting_results.R")
#5. Expected Results
source("R/23_expected_results.R")
#6. vs Stuff+
source("R/24_battles.R")
#7. Hitting Ultra Model
source("R/25_hitting_ultra_model.R")
#8. Generate hitting report
source("R/26_generate_hitter_report.R")
#9. Multiple Reports
source("R/27_vector_hitters.R")
generate_hitter_report("Forbes, Patrick")
generate_hitter_report("Cuvet, Daniel")
generate_hitter_report("Cuvet, Daniel")
